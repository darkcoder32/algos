Time Complexity = O(k+(n-k)logk)

Max Heap implementation

void heapify(int i,int n,int arr[]){
    int l=2*i+1;
    int r=2*i+2;
    int largest=i;
    if(l<n && arr[l]>arr[i]){
        largest=l;
    }
    if(r<n && arr[r]>arr[largest]){
        largest=r;
    }
    if(largest!=i){
        swap(arr[largest],arr[i]);
        i=largest;
        heapify(i,n,arr);
    }
}  
void buildHeap(int output[],int n){
    int i=(n-2)/2;
    while(i>=0){
        heapify(i,n,output);
        i--;
    }
}
int kthSmallest(int arr[], int n, int k){
    // Your code here
    int output[k];
   for(int i=0;i<k;i++){
       output[i]=arr[i];
   }
   buildHeap(output,k);
   for(int i=k;i<n;i++){
       if(arr[i]>output[0]) continue;
       output[0]=arr[i];
       heapify(0,k,output);
   }
   return output[0];
}
