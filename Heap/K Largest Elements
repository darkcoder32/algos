Time Complexity = O(k+(n-k)logk+klogk)                //klogk for sorting

Min Heap Implementation
 
void heapify(int i,int n,int arr[]){
    int l=2*i+1;
    int r=2*i+2;
    int smallest=i;
    if(l<n && arr[l]<arr[i]){
        smallest=l;
    }
    if(r<n && arr[r]<arr[smallest]){
        smallest=r;
    }
    if(smallest!=i){
        swap(arr[smallest],arr[i]);
        i=smallest;
        heapify(i,n,arr);
    }
}
void buildHeap(int output[],int n){
    int i=(n-2)/2;
    while(i>=0){
        heapify(i,n,output);
        i--;
    }
}

void kthLargest(int arr[], int n, int k){
   int output[k];
   for(int i=0;i<k;i++){
       output[i]=arr[i];
   }
   buildHeap(output,k);
   for(int i=k;i<n;i++){
       if(arr[i]<output[0]) continue;
       output[0]=arr[i];
       heapify(0,k,output);
   }
   sort(output,output+k,greater<int>());
  for(int i=0;i<k;i++) cout<<output[i]<<" ";
  cout<<endl;
}












or 



void kthLargest(int arr[], int n, int k){
    
    priority_queue<int, vector<int>, greater<int>> q; // making Minheap
    vector<int> v;
    
    for(int i = 0; i < n;i++){
        if(q.size() == k){ // if size becomes equal to k
            if(q.top() < arr[i]){ // if top element is smaller than arr[i]
                q.pop();   
                q.push(arr[i]);  
            }
        }
        else
            q.push(arr[i]);
    }
        
    while(!q.empty()) v.push_back(q.top()), q.pop(); // push all heap elements in vector
        
    for(int i = v.size()-1;i>=0;i--)
        cout << v[i] << " ";
    cout << endl;
}
