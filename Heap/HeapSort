Time Complexity = O(nlogn)

void heapSort(int arr[], int n)  {                   //just like selection sort put the largest element at the end every time
    buildHeap(arr, n);
    for (int i=n-1; i>=0; i--)  { 
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
} */
// The functions should be written in a way that array become sorted 
// in increasing order when above heapSort() is called.
// To heapify a subtree rooted with node i which is  an index in arr[]. 
// n is size of heap. This function  is used in above heapSor()
void heapify(int arr[], int n, int i)  {
      // Your Code Here
      int l=2*i+1;
      int r=2*i+2;
      int largest=i;
      if(l<n && arr[l]>arr[i]){
          largest=l;
      }
      if(r<n && arr[r]>arr[largest]){
          largest=r;
      }
      if(largest!=i){
          swap(arr[largest],arr[i]);
          i=largest;
          heapify(arr,n,i);
      }
}
// Rearranges input array so that it becomes a max heap
void buildHeap(int arr[], int n)  {                   //time complexity = O(n)
    // Your Code Here
    int i=(n-2)/2;
    while(i>=0){
        heapify(arr,n,i);
        i--;
    }
}
