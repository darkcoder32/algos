1) Efficient Space and minimum line solution
   Time Complexity = O(n)
   Space Complexity = O(1)

    int trap(vector<int>& arr) {
            int lo=0,hi=arr.size()-1,water=0,level=0;
            while(lo<hi){
                int lower=arr[lo]<arr[hi]?arr[lo++]:arr[hi--];
                level=max(level,lower);
                water+=(level-lower);
            }
            return water;
        }

2) Efficient Space Solution
   Time Complexity = O(n)
   Space Complexity = O(1)
   
   int trap(vector<int>& arr) {
        int right_max=0,left_max=0;
        int lo=0,hi=arr.size()-1;
        int result=0;
        while(lo<hi){
            if(arr[lo]<arr[hi]){
                if(arr[lo]>left_max)
                    left_max=arr[lo];
                else
                    result+=left_max-arr[lo];
                lo++;
            }
            else
            {
                if(arr[hi]>right_max)
                    right_max=arr[hi];
                else
                    result+=right_max-arr[hi];
                hi--;
            }
        }
        return result;
    }
   
3) Time Complexity = O(n)
   Space Complexity = O(n)

    int trappingWater(int arr[], int n){
        // Your code here
         int Lmax[n],Rmax[n];
         Lmax[0]=arr[0];
         Rmax[n-1]=arr[n-1];
         for(int i=1;i<n;i++){
             Lmax[i]=max(Lmax[i-1],arr[i]);
         }
         for(int i=n-2;i>-1;i--){
             Rmax[i]=max(Rmax[i+1],arr[i]);
         }
         int c=0;
         for(int i=0;i<n;i++){
             int min1=min(Lmax[i],Rmax[i]);
             c+=min1-arr[i];
         }
         return c;
    }*/
