Time Complexity= O(n*m)     //2d dp vector

int lcs(vvi &dp,string s1,string s2,int n,int m){
    if(dp[n][m]!=-1) return dp[n][m];
    if(n==0 || m==0){
        return 0;
    }
    if(s1[n-1]==s2[m-1])
        dp[n][m]=1+lcs(dp,s1,s2,n-1,m-1);
    else{
        dp[n][m]=max(lcs(dp,s1,s2,n,m-1),lcs(dp,s1,s2,n-1,m));
    }
    return dp[n][m];
}


Template Used

#include<bits/stdc++.h>
#include <boost/multiprecision/cpp_int.hpp> 
using boost::multiprecision::cpp_int;
using namespace std;

#define F first
#define S second
#define pii pair<int,int>
#define ppiii pair<pair<int,int>,int>
#define ppssi pair<pair<string,string>,int>
#define mkp make_pair
#define vi vector<int>
#define vvi vector<vector<int>>
#define vll vector<long long>
#define vlli vector<long long int>
#define vvll vector<vector<long long>>
#define vvlli vector<vector<long long int>>
#define vulli vector<unsigned long long int>
#define vvulli vector<vector<unsigned long long int>>
#define loopi(i,n) for(int i = 0; i < n; i++)
#define loopj(j,n) for(int j = 0; j < n; j++)
#define ll long long
#define lli long long int 
#define ulli unsigned long long int
#define mod 1000000007
