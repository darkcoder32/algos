Time Complexity = O(n)                             //with dp solution else exponential

#include<bits/stdc++.h>
#include <boost/multiprecision/cpp_int.hpp> 
using boost::multiprecision::cpp_int;
using namespace std;

#define F first
#define S second
#define pii pair<int,int>
#define ppiii pair<pair<int,int>,int>
#define ppssi pair<pair<string,string>,int>
#define mkp make_pair
#define vi vector<int>
#define vvi vector<vector<int>>
#define vll vector<long long>
#define vlli vector<long long int>
#define vvll vector<vector<long long>>
#define vvlli vector<vector<long long int>>
#define vulli vector<unsigned long long int>
#define vvulli vector<vector<unsigned long long int>>
#define loopi(i,n) for(int i = 0; i < n; i++)
#define loopj(j,n) for(int j = 0; j < n; j++)
#define ll long long
#define lli long long int 
#define ulli unsigned long long int

cpp_int catalan(vector<cpp_int> &dp,int n){
    if(dp[n]>0) return dp[n];
    if(n==0){
        dp[0]=1;
        return dp[0];
    }
    cpp_int sum=0;
    for(int i=0;i<n;i++){
        dp[n]+=catalan(dp,i)*catalan(dp,n-i-1);
    }
    return dp[n];
}
int main()
 {
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    vector<cpp_int>dp(n+1,0);
	    cout<<catalan(dp,n)<<endl;
	   //cout<<n<<endl;
	}
	return 0;
}
