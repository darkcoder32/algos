Time Complexity = O(n)                       //using a global variable takes too much time
Time Taken = 0.47                            // if i use predefined mod which is global time limit will be crossed
long long countWays(int m){
    long long res[m + 1];
    res[0] = 1;
    res[1] = 1;
    for (int i = 2; i <= m; i++)  
        res[i] = (res[i-1]%1000000007 + res[i-2]%1000000007)%1000000007;
      
    return res[m];
}








Time Complexity = O(n)
Time Taken = 0.7
long long countWays(int n,long long dp[]){
    if(n<0){
        return 0;
    }
    if(dp[n]!=0) return dp[n];
    if(n==0){
        dp[n]=1;
        return 1;
    }
    dp[n]=(countWays(n-1,dp)%1000000007+countWays(n-2,dp)%1000000007)%1000000007;
    return dp[n];
}
long long countWays(int n){
    long long dp[n+1]={0};
    return countWays(n,dp);
}









Time Complexity = O(n)
Time Taken = 0.8
long long countWays(int n){
    int dp[n+1]={0};
    dp[0]=1;
    for(int i=1;i<n+1;i++){
        if(1<=i){
            dp[i]=(dp[i]%1000000007+dp[i-1]%1000000007)%1000000007;
        }
        if(2<=i){
            dp[i]=(dp[i]%1000000007+dp[i-2]%1000000007)%1000000007;
        }
    }
    return (long)dp[n];
}
