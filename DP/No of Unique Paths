TIme Complexity = O(n*m)           //2d dp vector
Table Solution
int paths(int x,int y,int n,int m,vvi &dp){
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(!i) dp[i][j]=1;
            else if(!j) dp[i][j]=1;
            else{
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
    }
    return dp[n-1][m-1];
}









Template Used
#include<bits/stdc++.h>
#include <boost/multiprecision/cpp_int.hpp> 
using boost::multiprecision::cpp_int;
using namespace std;

#define F first
#define S second
#define pii pair<int,int>
#define ppiii pair<pair<int,int>,int>
#define ppssi pair<pair<string,string>,int>
#define mkp make_pair
#define vi vector<int>
#define vvi vector<vector<int>>
#define vll vector<long long>
#define vlli vector<long long int>
#define vvll vector<vector<long long>>
#define vvlli vector<vector<long long int>>
#define vulli vector<unsigned long long int>
#define vvulli vector<vector<unsigned long long int>>
#define loopi(i,n) for(int i = 0; i < n; i++)
#define loopj(j,n) for(int j = 0; j < n; j++)
#define ll long long
#define lli long long int 
#define ulli unsigned long long int
#define mod 1000000007
int main()
 {
	int t;
	cin>>t;
	while(t--){
	    int n,m;
	    cin>>n>>m;
	    vvi dp(n+1,vector<int>(m+1,-1));
		cout<<paths(0,0,n,m,dp)<<endl;
	}
	return 0;
}
