 TIME COMPLEXITY = O(nlogm + mlogn)

int pairs(int x,int arr2[],int noY[],int n,int m){
    if(x==0){
        return 0;
    }
    else if(x==1){
        return noY[0];
    }
    int *ind=upper_bound(arr2,arr2+m,x);
    int count=arr2+m-ind;
    if(x==2){
        count=count-noY[3]-noY[4];
    }
    else if(x==3){
        count+=(noY[2]);
    }
    return count+noY[1]+noY[0];       //x^0 >0^x and x^1 > 1^x
}
long long countPairs(int arr1[], int arr2[], int n, int m)
{
   //Your code here
   int noY[5]={0};
   for(int i=0;i<m;i++){
       if(arr2[i]<5){
           noY[arr2[i]]++;
       }
   }
   long long c=0;
   sort(arr2,arr2+m);
   for(int i=0;i<n;i++){
       c+=pairs(arr1[i],arr2,noY,n,m);
   }
   return c;
}
