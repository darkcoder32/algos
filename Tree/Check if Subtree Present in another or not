Time Complexity = O(n)


void inOrder(Node* root,char arr[],int &n){
    if(root==NULL){
        arr[n++]='$';
        return;
    }
    inOrder(root->left,arr,n);
    arr[n++]=root->data;
    inOrder(root->right,arr,n);
}
void preOrder(Node* root,char arr[],int &m){
    if(root==NULL){
        arr[m++]='$';
        return;
    }
    arr[m++]=root->data;
    preOrder(root->left,arr,m);
    preOrder(root->right,arr,m);
}
bool isSubtree(Node* t, Node* s) {
    if(s==NULL) return true;
    if(t==NULL) return false;
    char preOrderT[100],inOrderT[100],preOrderS[100],inOrderS[100];
    int n=0,m=0;
    preOrder(t,preOrderT,m);
    inOrder(t,inOrderT,n);
    preOrderT[m]='\0';
    inOrderT[n]='\0';
    n=0,m=0;
    preOrder(s,preOrderS,m);
    inOrder(s,inOrderS,n);
    preOrderS[m]='\0';
    inOrderS[n]='\0';
    if(strstr(preOrderT,preOrderS)==NULL) return false;
    if(strstr(inOrderT,inOrderS)==NULL) return false;
    return true;
}


Time Complexity = O(nm);
Extra Space = O(1)

bool isIdentical(Node *r1, Node *r2)
{
    //Your Code here
    if(r1==NULL && r2==NULL)  return true;
    else if(r1==NULL || r2==NULL) return false;
    return (r1->data==r2->data && isIdentical(r1->left,r2->left) &&isIdentical(r1->right,r2->right));
}
bool isSubtree(Node* t, Node* s) {
    // Your code here
    // return 1 if T2 is subtree of T1 else 0
    if(s==NULL) return true;
    if(t==NULL) return false;
    if(isIdentical(t,s)) return true;
    return (isSubtree(t->left,s) || isSubtree(t->right,s));
}





Time Complexity = o(n)
Space Complexity  = O(no of duplicates in tree)

Vector Method

bool isIdentical(Node *r1, Node *r2)
{
    //Your Code here
    if(r1==NULL && r2==NULL)  return true;
    else if(r1==NULL || r2==NULL) return false;
    return (r1->data==r2->data && isIdentical(r1->left,r2->left) &&isIdentical(r1->right,r2->right));
}
void subtreeNode(Node* root,int x,vector<Node*> &node){
    if(root==NULL) return ;
    if(root->data==x){
        node.push(root);
    }
    subtreeNode(root->left,x,node);
    subtreeNode(root->right,x,node);
}
bool isSubtree(Node* s, Node* t) {
    // Your code here
    // return 1 if T2 is subtree of T1 else 0
    int x=s->data;
    vector<Node*>node;
    subtreeNode(t,x,node);
    for(int i=0;i<node.size();i++){
        if(isIdentical(node[i],s)) return true;
    }
    return false;
}
