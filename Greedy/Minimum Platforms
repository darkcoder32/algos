Time Complexity = O(nlogn)

int findPlatform(int arr[], int dep[], int n){
    sort(arr,arr+n);
    sort(dep,dep+n);
    int i=0,j=0,count=0,ans=0;
    while(i<n && j<n){
        if(arr[i]<=dep[j]){
            count++;
            ans=max(count,ans);
            i++;
        }
        else{
            j++;
            count--;
        }
    }
    return ans;
}








Time Complexity = O(nlogn)

struct train
{
    int t;
    char type;
};
bool compare(const train &a,const train &b){
    if(a.t==b.t)
        return a.type<b.type;
    return a.t<b.t;
}
int findPlatform(int arr[], int dep[], int n){

    int size=2*n;    
    train a[size];
    int i=0;
    for(;i<n;i++){
        a[i].t=arr[i];
        a[i].type='A';
    }
    for(int j=0;j<n;j++){
        a[i+j].t=dep[j];
        a[i+j].type='D';
    }
    sort(a,a+size,compare);
    int ans=0;
    int count=0;
    for(int j=0;j<size;j++){
        if(a[j].type=='A'){
            count++;
        }
        else {
            count--;
        }
        ans=max(ans,count);
    }
    return ans;
}
