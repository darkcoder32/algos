Time Complexity = o(no of words* no of capital letters which hava a endOfWord==true)

#include<bits/stdc++.h>
using namespace std;

struct TrieNode{
    TrieNode* child[26];
    bool endOfWord;
    vector<string>words;
    TrieNode(){
        for(int i=0;i<26;i++){
            child[i]=NULL;
            endOfWord=false;
        }
    }
};
void printWords(TrieNode* curr){
    if(curr->endOfWord){
        sort(curr->words.begin(),curr->words.end());
        for(string s: curr->words){
            cout<<s<<" ";
        }
    }
    for(int i=0;i<26;i++){
        if(curr->child[i])
            printWords(curr->child[i]);
    }
}
bool search(TrieNode* root,string key){
    TrieNode* curr=root;
    for(int i=0;i<key.size();i++){
        if(!curr->child[key[i]-'A']) return false;
        curr=curr->child[key[i]-'A'];
    }
    printWords(curr);
    return true;
}
void insert(TrieNode* root,string s){
    TrieNode* curr=root;
    for(int i=0;i<s.size();i++){
        if(islower(s[i])) continue;
        if(curr->child[s[i]-'A']==NULL){
            curr->child[s[i]-'A']=new TrieNode();
        }
        curr=curr->child[s[i]-'A'];
    }
    curr->endOfWord=true;
    curr->words.push_back(s);
}
int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        TrieNode* root=new TrieNode();
        for(int i=0;i<n;i++){
            string s;
            cin>>s;
            insert(root,s);
        }
        string key;
        cin>>key;
        if(!search(root,key)) cout<<"No match found";
        cout<<endl;
    }
}
