Time Complexity = O(key)    for both search and insert

#include<bits/stdc++.h>
using namespace std;

struct TrieNode{
    TrieNode* child[26];
    bool endOfWord;
    TrieNode(){
        for(int i=0;i<26;i++){
            child[i]=NULL;
            endOfWord=false;
        }
    }
};
void insert(TrieNode* root,string s){
    TrieNode* curr=root;
    for(int i=0;i<s.size();i++){
        if(curr->child[s[i]-'a']==NULL){
            curr->child[s[i]-'a']=new TrieNode();
        }
        curr=curr->child[s[i]-'a'];
    }
    curr->endOfWord=true;
}
bool search(TrieNode* root,string key){
    TrieNode* curr=root;
    for(int i=0;i<key.size();i++){
        if(curr->child[key[i]-'a']==NULL) return false;
        curr=curr->child[key[i]-'a'];
    }
    return curr->endOfWord;
}
int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        TrieNode* root=new TrieNode();
        for(int i=0;i<n;i++){
            string s;
            cin>>s;
            insert(root,s);
        }
        string key;
        cin>>key;
        cout<<search(root,key)<<endl;
    }
}
